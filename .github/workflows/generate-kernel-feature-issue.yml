name: Generate Kernel Feature Issue

on:
  workflow_dispatch:
    inputs:
      feature:
        description: 'Feature Name'
        required: true
        type: string
        default: 'Kernel'
      context:
        description: 'Context or component area'
        required: true
        type: string
        default: 'Integration'
      category:
        description: 'Feature category'
        required: true
        type: choice
        options:
          - Core Kernel
          - Memory Management
          - Device Drivers
          - Inter-Process Communication
          - File System
          - Network Stack
          - Security
          - Performance
          - Architecture Support
      priority:
        description: 'Priority level'
        required: true
        type: choice
        options:
          - Critical
          - High
          - Medium
          - Low
      complexity:
        description: 'Implementation complexity'
        required: true
        type: choice
        options:
          - Simple
          - Moderate
          - Complex
          - Very Complex
      duration:
        description: 'Estimated effort'
        required: true
        type: choice
        options:
          - High
          - Medium
          - Low
      project_info:
        description: 'Project metadata (JSON format: {"epic": "Kernel Modernization", "spec_path": "", "standards": "GNU Coding Standards"})'
        required: false
        type: string
        default: '{"epic": "Kernel Modernization", "spec_path": "", "standards": "GNU Coding Standards"}'
      implementation_details:
        description: 'Implementation details (JSON format: {"tasks": ["Define structures"], "targets": ["Memory efficient"], "devices": ["x86 (32-bit)", "x86_64"]})'
        required: true
        type: string
        default: '{"tasks": ["Define kernel data structures", "Implement core algorithms", "Add system call interface"], "targets": ["Memory efficient implementation", "Low latency operations"], "devices": ["x86 (32-bit)", "x86_64", "QEMU virtual devices"]}'
      code_structure:
        description: 'Code structure (JSON format: {"mainfiles": ["kern/feature.c"], "functions": ["feature_init()"], "files": ["kern/new_feature.c"]})'
        required: false
        type: string
        default: '{"mainfiles": ["kern/feature.c", "include/kern/feature.h"], "functions": ["feature_init()", "feature_enable()"], "files": ["kern/new_feature.c", "include/kern/new_feature.h"]}'
      quality_requirements:
        description: 'Quality requirements (JSON format: {"tests": ["Unit tests"], "dependencies": ["Updated headers"], "criteria": ["Compiles without warnings"]})'
        required: true
        type: string
        default: '{"tests": ["Unit tests for core functions", "Integration tests"], "dependencies": ["Updated kernel headers", "Compatible build system"], "criteria": ["Feature compiles without warnings", "All tests pass", "Documentation updated"]}'

jobs:
  create_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Feature ID
        id: feature_id
        run: |
          FEATURE_ID="KERN-$(date +%Y%m%d)-$(echo '${{ inputs.feature }}' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | cut -c1-10)"
          echo "feature_id=$FEATURE_ID" >> $GITHUB_OUTPUT
          
      - name: Parse inputs and format arrays as markdown lists
        id: format_lists
        run: |
          # Function to convert JSON array to markdown list
          format_array() {
            echo "$1" | jq -r '.[] | "- [ ] " + .'
          }
          
          format_array_simple() {
            echo "$1" | jq -r '.[] | "- " + .'
          }
          
          # Parse consolidated JSON inputs
          PROJECT_INFO='${{ inputs.project_info }}'
          IMPL_DETAILS='${{ inputs.implementation_details }}'
          CODE_STRUCTURE='${{ inputs.code_structure }}'
          QUALITY_REQS='${{ inputs.quality_requirements }}'
          
          # Extract individual fields from JSON objects
          EPIC=$(echo "$PROJECT_INFO" | jq -r '.epic // "Kernel Modernization"')
          SPEC_PATH=$(echo "$PROJECT_INFO" | jq -r '.spec_path // ""')
          STANDARDS=$(echo "$PROJECT_INFO" | jq -r '.standards // "GNU Coding Standards"')
          
          # Extract and format arrays from consolidated inputs
          TASKS=$(echo "$IMPL_DETAILS" | jq -r '.tasks // []' | jq -r '.[] | "- [ ] " + .')
          TARGETS=$(echo "$IMPL_DETAILS" | jq -r '.targets // []' | jq -r '.[] | "- " + .')
          DEVICES=$(echo "$IMPL_DETAILS" | jq -r '.devices // []' | jq -r '.[] | "- " + .')
          
          MAINFILES=$(echo "$CODE_STRUCTURE" | jq -r '.mainfiles // []' | jq -r '.[] | "- " + .')
          FUNCTIONS=$(echo "$CODE_STRUCTURE" | jq -r '.functions // []' | jq -r '.[] | "- " + .')
          FILES=$(echo "$CODE_STRUCTURE" | jq -r '.files // []' | jq -r '.[] | "- [ ] " + .')
          
          TESTS=$(echo "$QUALITY_REQS" | jq -r '.tests // []' | jq -r '.[] | "- " + .')
          DEPENDENCIES=$(echo "$QUALITY_REQS" | jq -r '.dependencies // []' | jq -r '.[] | "- " + .')
          CRITERIA=$(echo "$QUALITY_REQS" | jq -r '.criteria // []' | jq -r '.[] | "- [ ] " + .')
          
          # Use delimiter to handle multiline
          delimiter=$(openssl rand -hex 8)
          
          echo "epic=$EPIC" >> $GITHUB_OUTPUT
          echo "spec_path=$SPEC_PATH" >> $GITHUB_OUTPUT
          echo "standards=$STANDARDS" >> $GITHUB_OUTPUT
          
          echo "tasks<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TASKS" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "targets<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TARGETS" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "devices<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$DEVICES" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "mainfiles<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$MAINFILES" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "functions<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "tests<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$TESTS" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "dependencies<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$DEPENDENCIES" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "files<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
          echo "criteria<<${delimiter}" >> $GITHUB_OUTPUT
          echo "$CRITERIA" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Create Issue
        uses: actions/github-script@v7
        with:
          script: |
            const specPath = '${{ steps.format_lists.outputs.spec_path }}' || `${context.repo.owner}/${context.repo.repo}/blob/main/docs/architecture-overview.md`;
            const specUrl = `https://github.com/${specPath}`;
            
            const issueBody = `## ${{ inputs.feature }}
            
            **Category:** ${{ inputs.category }} | **Priority:** ${{ inputs.priority }} | **Complexity:** ${{ inputs.complexity }}
            **Estimated Effort:** ${{ inputs.duration }}
            
            ---
            
            ### Description
            Implement ${{ inputs.feature }} for ${{ inputs.context }}
            
            ### Implementation Requirements
            
            ${{ steps.format_lists.outputs.tasks }}
            
            ---
            
            ### Technical Specifications
            
            **Performance Targets:**
            ${{ steps.format_lists.outputs.targets }}
            
            **Supported Devices:**
            ${{ steps.format_lists.outputs.devices }}
            
            ---
            
            ### Code Structure
            
            **Files to implement:**
            ${{ steps.format_lists.outputs.mainfiles }}
            
            **Key Functions:**
            ${{ steps.format_lists.outputs.functions }}
            
            ---
            
            ### Testing Requirements
            
            ${{ steps.format_lists.outputs.tests }}
            
            ### Dependencies
            
            ${{ steps.format_lists.outputs.dependencies }}
            
            ### Files to Create
            
            ${{ steps.format_lists.outputs.files }}
            
            ---
            
            ### Implementation Notes
            
            This feature is part of the ${{ steps.format_lists.outputs.epic }} implementation.
            
            See the [${{ steps.format_lists.outputs.epic }} implementation specification](${specUrl}) for architectural context.
            
            **${{ steps.format_lists.outputs.standards }} Compliance:** All implementations must follow ${{ steps.format_lists.outputs.standards }}
            
            ### Acceptance Criteria
            
            ${{ steps.format_lists.outputs.criteria }}
            
            ---
            
            *Feature ID: ${{ steps.feature_id.outputs.feature_id }} | Auto-generated from ${{ steps.format_lists.outputs.epic }} implementation workflow*`;
            
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[KERNEL] ${{ inputs.feature }} - ${{ inputs.context }}`,
              body: issueBody,
              labels: ['kernel-feature', 'enhancement', '${{ inputs.category }}', '${{ inputs.priority }}']
            });
            
            console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);
